<?php
/**
 * Implementation of hook_menu
 */
function roman_numerals_menu() {
  return [
    'roman_numerals' => [
      'title' => t('Roman Numerals Converter'),
      'file' => 'roman_converter.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => ['roman_numerals_form'],
      'access callback' => true,
    ]
  ];
}

/**
 * Implementation of hook_form
 */
function roman_numerals_form($form, &$form_state) {
  // We rely on the theme for styling purposes, but this fixes a small nuisance
  // and demonstrates how additional custom styles could be added
  $form['#attached']['css'] = [
    drupal_get_path('module', 'roman_numerals') . '/roman_numerals.css',
  ];

  $form['roman_numerals'] = [
    '#type' => 'textfield',
    '#title' => t('Roman numerals'),
    '#description' => t("Enter a roman numeral that you want converted to an integer"),
    '#required' => true,
    '#attributes' => [
      'placeholder' => 'XIV'
    ]
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => [
      'callback' => 'roman_numerals_form_callback',
      'wrapper' => 'result',
      'effect' => 'none',
    ],
  ];

  $form['result'] = [
    '#type' => 'markup',
    '#prefix' => '<div id="result">',
    '#suffix' => '</div>',
  ];

  return $form;
}

/**
 * AJAX callback for roman_numerals form submission. Since this function simply
 * returns a portion of the form to be swapped out with the result of the form
 * submission, the form would gracefully degrade in a non-JS environment.
 * However, in 2016, such environments are pretty rare.
 */
function roman_numerals_form_callback($form, &$form_state) {
  return $form['result'];
}

/**
 * Implementation of hook_form_validate
 */
function roman_numerals_form_validate($form, &$form_state) {
  $roman_numerals = $form_state['values']['roman_numerals'];

  if (!preg_match('/^[IVXLCDM]+$/', $roman_numerals)) {
    form_set_error('roman_numerals', t('A roman numeral can only contain the characters I, V, X, L, C, D and M'));
  }
}

/**
 * Implementation of hook_form_submit
 */
function roman_numerals_form_submit($form, &$form_state) {
  $converter = new RomanConverter();

  // I'm using a try/catch block here, since there's a risk that the user input
  // is an incorrectly formatted roman numeral. We've already ensured that the
  // input doesn't contained any weird characters, but validating that the input
  // is correctly formatted without actually calling the toInteger method would
  // basically require a reimplementation of that method, so instead we just
  // catch any exceptions that are thrown.
  try {
    $converted = $converter->toInteger($form_state['values']['roman_numerals']);
    drupal_set_message(t("That's equal to @numeral", ['@numeral' => $converted]));
  } catch (Exception $error) {
    $message = $error->getCode() === 2 ? t("That's an incorrectly formatted roman numeral") : $error->getMessage();
    form_set_error('roman_numerals', $message);
  }
}
